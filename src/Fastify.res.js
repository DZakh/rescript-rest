// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Rest = require("./Rest.res.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var JSONSchema = require("rescript-json-schema/src/JSONSchema.res.js");
var S$RescriptSchema = require("rescript-schema/src/S.res.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function route(app, restRoute, fn) {
  var match = Rest.params(restRoute);
  var isRawBody = match.isRawBody;
  var variablesSchema = match.variablesSchema;
  var pathItems = match.pathItems;
  var url = "";
  for(var idx = 0 ,idx_finish = pathItems.length; idx < idx_finish; ++idx){
    var pathItem = pathItems[idx];
    url = typeof pathItem === "string" ? url + pathItem : url + ":" + pathItem.name;
  }
  var responseSchemas = [];
  var routeSchemaResponses = {};
  match.responses.forEach(function (r) {
        responseSchemas.push(r.schema);
        var status = r.status;
        var status$1 = status !== undefined ? status : "default";
        var content = {};
        var schema = JSONSchema.make(r.dataSchema);
        var tmp;
        tmp = schema.TAG === "Ok" ? schema._0 : Js_exn.raiseError("Failed to create JSONSchema for response with status " + status$1 + ". Error: " + schema._0);
        content["application/json"] = {
          schema: tmp
        };
        routeSchemaResponses[status$1] = {
          description: r.description,
          content: content
        };
      });
  var responseSchema = S$RescriptSchema.union(responseSchemas);
  var routeOptions_method = match.definition.method;
  var routeOptions_handler = function (request, reply) {
    var variables;
    try {
      variables = S$RescriptSchema.parseAnyOrRaiseWith(request, variablesSchema);
    }
    catch (raw_error){
      var error = Caml_js_exceptions.internalToOCamlException(raw_error);
      if (error.RE_EXN_ID === S$RescriptSchema.Raised) {
        reply.status(400);
        reply.send({
              statusCode: 400,
              error: "Bad Request",
              message: S$RescriptSchema.$$Error.message(error._1)
            });
        throw 0;
      }
      throw error;
    }
    fn(variables).then(function (handlerReturn) {
          var data = S$RescriptSchema.serializeToUnknownOrRaiseWith(handlerReturn, responseSchema);
          var headers = data.headers;
          if (headers) {
            reply.headers(headers);
          }
          reply.status((data.status || 200));
          reply.send(data.data);
        });
  };
  var routeOptions_schema = {
    response: routeSchemaResponses
  };
  var routeOptions = {
    method: routeOptions_method,
    url: url,
    handler: routeOptions_handler,
    schema: routeOptions_schema
  };
  app.register(function (app, param, done) {
        if (isRawBody) {
          app.addContentTypeParser("application/json", {
                parseAs: "string"
              }, (function (_req, data, done) {
                  done(null, data);
                }));
        }
        app.route(routeOptions);
        done();
      });
}

var Swagger = {};

exports.route = route;
exports.Swagger = Swagger;
/* Rest Not a pure module */
