// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var S$RescriptSchema = require("rescript-schema/src/S.res.js");

async function $$default(args) {
  var match = args.body;
  var match$1 = args.body;
  var match$2 = args.headers;
  var tmp;
  if (match$1 !== undefined) {
    switch (match$1.TAG) {
      case "JsonString" :
          tmp = match$2 !== undefined ? Object.assign({
                  "content-type": "application/json"
                }, match$2) : ({
                "content-type": "application/json"
              });
          break;
      case "Text" :
      case "Blob" :
          tmp = match$2 !== undefined ? match$2 : undefined;
          break;
      
    }
  } else {
    tmp = match$2 !== undefined ? match$2 : undefined;
  }
  var result = await fetch(args.path, {
        method: args.method,
        body: match !== undefined ? match._0 : undefined,
        headers: tmp
      });
  var contentType = result.headers.get("content-type");
  if (contentType !== undefined) {
    var contentType$1 = Caml_option.valFromOption(contentType);
    if (contentType$1.includes("application/") && contentType$1.includes("json")) {
      return {
              body: {
                TAG: "JsonString",
                _0: await result.json()
              },
              status: result.status
            };
    }
    if (contentType$1.includes("text/")) {
      return {
              body: {
                TAG: "Text",
                _0: await result.text()
              },
              status: result.status
            };
    }
    
  }
  return {
          body: {
            TAG: "Blob",
            _0: await result.blob()
          },
          status: result.status
        };
}

var ApiFetcher = {
  $$default: $$default
};

function client(baseUrl, apiOpt) {
  var api = apiOpt !== undefined ? apiOpt : $$default;
  var initializedRoutes = new WeakMap();
  var getRouteParams = function (route) {
    var r = initializedRoutes.get(route);
    if (r !== undefined) {
      return r;
    }
    var routeDefinition = route();
    var variablesSchema = S$RescriptSchema.object(function (s) {
          return routeDefinition.variables({
                      field: (function (fieldName, schema) {
                          return s.nestedField("body", fieldName, schema);
                        }),
                      header: (function (fieldName, schema) {
                          return s.nestedField("headers", fieldName, schema);
                        })
                    });
        });
    var params_path = baseUrl + routeDefinition.path;
    var params = {
      definition: routeDefinition,
      variablesSchema: variablesSchema,
      path: params_path
    };
    initializedRoutes.set(route, params);
    return params;
  };
  var call = function (route, variables) {
    var match = getRouteParams(route);
    var data = S$RescriptSchema.serializeToUnknownOrRaiseWith(variables, match.variablesSchema);
    var body = data.body;
    var body$1 = body !== undefined ? ({
          TAG: "JsonString",
          _0: JSON.stringify(Caml_option.valFromOption(body))
        }) : undefined;
    return api({
                body: body$1,
                headers: data.headers,
                method: match.definition.method,
                path: match.path
              });
  };
  return {
          call: call,
          baseUrl: baseUrl,
          api: api
        };
}

exports.ApiFetcher = ApiFetcher;
exports.client = client;
/* S-RescriptSchema Not a pure module */
