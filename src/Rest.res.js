// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var S$RescriptSchema = require("rescript-schema/src/S.res.js");

async function $$default(args) {
  var match = args.body;
  var match$1 = args.body;
  var tmp;
  if (match$1 !== undefined) {
    switch (match$1.TAG) {
      case "JsonString" :
          tmp = {
            "content-type": "application/json"
          };
          break;
      case "Text" :
      case "Blob" :
          tmp = undefined;
          break;
      
    }
  } else {
    tmp = undefined;
  }
  var result = await fetch(args.path, {
        method: args.method,
        body: match !== undefined ? match._0 : undefined,
        headers: tmp
      });
  var contentType = result.headers.get("content-type");
  if (contentType !== undefined) {
    var contentType$1 = Caml_option.valFromOption(contentType);
    if (contentType$1.includes("application/") && contentType$1.includes("json")) {
      return {
              body: {
                TAG: "JsonString",
                _0: await result.json()
              },
              status: result.status
            };
    }
    if (contentType$1.includes("text/")) {
      return {
              body: {
                TAG: "Text",
                _0: await result.text()
              },
              status: result.status
            };
    }
    
  }
  return {
          body: {
            TAG: "Blob",
            _0: await result.blob()
          },
          status: result.status
        };
}

var ApiFetcher = {
  $$default: $$default
};

function client(baseUrl, apiOpt) {
  var api = apiOpt !== undefined ? apiOpt : $$default;
  var initializedRoutes = new WeakMap();
  var getRouteParams = function (route) {
    var r = initializedRoutes.get(route);
    if (r !== undefined) {
      return r;
    }
    var definition = route();
    var isBodyUsed = {
      contents: false
    };
    var bodySchema = S$RescriptSchema.object(function (s) {
          var field = function (fieldName, schema) {
            isBodyUsed.contents = true;
            return s.f(fieldName, schema);
          };
          var tag = function (tag$1, asValue) {
            isBodyUsed.contents = true;
            s.t(tag$1, asValue);
          };
          var fieldOr = function (fieldName, schema, or) {
            isBodyUsed.contents = true;
            return s.o(fieldName, schema, or);
          };
          return definition.schema({
                      field: field,
                      fieldOr: fieldOr,
                      tag: tag
                    });
        });
    var params_isBodyUsed = isBodyUsed.contents;
    var params_path = baseUrl + definition.path;
    var params = {
      definition: definition,
      isBodyUsed: params_isBodyUsed,
      bodySchema: bodySchema,
      path: params_path
    };
    initializedRoutes.set(route, params);
    return params;
  };
  var call = function (route, variables) {
    var match = getRouteParams(route);
    var j = S$RescriptSchema.serializeToJsonStringWith(variables, match.bodySchema, undefined);
    var bodyJsonString;
    bodyJsonString = j.TAG === "Ok" ? j._0 : S$RescriptSchema.$$Error.raise(j._0);
    return api({
                body: match.isBodyUsed ? ({
                      TAG: "JsonString",
                      _0: bodyJsonString
                    }) : undefined,
                method: match.definition.method,
                path: match.path
              });
  };
  return {
          call: call,
          baseUrl: baseUrl,
          api: api
        };
}

exports.ApiFetcher = ApiFetcher;
exports.client = client;
/* S-RescriptSchema Not a pure module */
